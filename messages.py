#!/usr/bin/python3
# -*- coding: utf-8 -*-

from aiogram import types
from aiogram.utils import exceptions

from buttons import *
from config_reader import config
from other import getPeoples
from other import getEvents
from other import getUsers
from other import setState
from other import setSphere
from other import getSphere

async def getBack(callback_query):
    await callback_query.message.edit_text("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–±–æ—Ç PBC!</b> üíú

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:

<b>–°—Ñ–µ—Ä—ã</b> - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –æ–±–ª–∞—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b> - –ó–¥–µ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∞—Ñ–∏—à–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

<b>–ü–æ–∏—Å–∫</b> - –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –Ω–∏–∫—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º/–ø–æ —Ñ–∞–º–∏–ª–∏–∏""", parse_mode = types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getMainButtons())

async def getMainMessage(bot, message):
    await bot.send_message(message.from_user.id, """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–±–æ—Ç PBC!</b> üíú

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:

<b>–°—Ñ–µ—Ä—ã</b> - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –æ–±–ª–∞—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b> - –ó–¥–µ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∞—Ñ–∏—à–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü

<b>–ü–æ–∏—Å–∫</b> - –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –Ω–∏–∫—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º/–ø–æ —Ñ–∞–º–∏–ª–∏–∏""", parse_mode=types.ParseMode.HTML,
                           reply_markup=getMainButtons())

async def getCmdStartMessage(bot, message):
    await bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, {0.username}!".format(message.from_user),
                           reply_markup=getCmdStartButtons())

async def getCmdHelpMessage(bot, message):
    await bot.send_message(message.from_user.id, """–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º PBC:

/main ‚Äî –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
–°—Ñ–µ—Ä—ã - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –æ–±–ª–∞—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - –ó–¥–µ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∞—Ñ–∏—à–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
–ü–æ–∏—Å–∫ - –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –Ω–∏–∫—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º/–§–∞–º–∏–ª–∏–∏""")

async def getCmdAdminMessage(bot, message):
    await bot.send_message(message.from_user.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                           reply_markup=getCmdAdminButtons())

async def getSpheresResendMessage(callback_query):
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É")
    await callback_query.message.edit_reply_markup(reply_markup=getSpheresButtons())

async def getSearchSurnameResendMessage(callback_query):
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é: ")
    await callback_query.message.edit_reply_markup(reply_markup=getSearchButtons())

async def getSearchTagResendMessage(callback_query):
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫(tg) –≤ —Ñ–æ—Ä–º–∞—Ç–µ @user: ")
    await callback_query.message.edit_reply_markup(reply_markup=getSearchButtons())

async def getEventsResendMessage(bot, callback_query):
    await callback_query.message.edit_text("–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ")
    await callback_query.message.edit_reply_markup(reply_markup=getEventsButtons())

    media = types.MediaGroup()
    data = getEvents()

    for x in data.keys():
        try:
            media.attach_photo(types.InputFile(data[x]['path']), data[x]['description'])
        except Exception:
            pass
    try:
        await bot.send_media_group(callback_query.from_user.id, media=media)
    except exceptions.BadRequest as e:
        await errorMessage(bot, callback_query, f'{e} (–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞)')
    except exceptions.ValidationError as e:
        await bot.send_message(callback_query.from_user.id, "–ü—É—Å—Ç–æ")

async def getPeoplesEditMessage(bot, callback_query):
    await callback_query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É\n<b>–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–º–µ–Ω–∞, —Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ —Å–≤–æ–π—Å—å—Ç–≤–∞–º–∏</b>", parse_mode = types.ParseMode.HTML)
    await bot.send_document(callback_query.from_user.id, open(config.PEOPLES_PATH.get_secret_value(), 'rb'))

async def getCmdNoAdminMessage(bot, message):
    await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

async def successfulyEditedMessage(bot, message):
    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ", reply_markup=getSuccessfulyEditedButtons())

async def getBackToAdminPanelMessage(callback_query):
    await callback_query.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", parse_mode = types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getCmdAdminButtons())

async def errorEditedMessage(bot, message, error):
    await bot.send_message(message.from_user.id, f"<b>{error}</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", parse_mode = types.ParseMode.HTML)

async def errorSendingFileMessage(bot, message):
    await bot.send_message(message.from_user.id, "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç")

async def errorMessage(bot, message, error):
    await bot.send_message(message.from_user.id, f"<b>–û—à–∏–±–∫–∞:</b> {error}", parse_mode = types.ParseMode.HTML)

async def blockMessage(bot, message):
    await bot.send_message(message.from_user.id, f"<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</b>", parse_mode = types.ParseMode.HTML)

async def getOneSphereMessage(callback_query, sphere):
    setSphere(callback_query.from_user.id, sphere)
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞", parse_mode = types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getOneSphereButtons(sphere))

async def getContactResendMessage(callback_query, surname):
    peoples = getPeoples()
    name = peoples[surname]['name']
    patronymic = peoples[surname]['patronymic']
    phone = peoples[surname]['phone']
    email = peoples[surname]['email']
    tg = peoples[surname]['tg']
    sphere = peoples[surname]['sphere']
    business = peoples[surname]['business']
    position = peoples[surname]['position']
    text_content = f"<b>–§–ò–û:</b> {surname} {name} {patronymic}\n\n"

    if phone != "":
        text_content += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"

    if email != "":
        text_content += f"<b>E-mail:</b> {email}\n\n"

    if tg != "":
        text_content += f"<b>TG:</b> {tg}\n\n"

    if sphere != []:
        text_content += f"<b>–°—Ñ–µ—Ä–∞(-—ã):</b> {', '.join(sphere)}\n\n"

    if business != "":
        text_content += f"<b>–ë–∏–∑–Ω–µ—Å:</b> {business}\n\n"

    if position != "":
        text_content += f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}"

    await callback_query.message.edit_text(text_content, parse_mode = types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getContactResendButtons(getSphere(callback_query.from_user.id)))

async def errorSendingTextMessage(bot, message):
    await bot.send_message(message.from_user.id, "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç")

async def getContactSurnameMessage(bot, message, surname):
    if surname in getPeoples().keys():
        peoples = getPeoples()
        name = peoples[surname]['name']
        patronymic = peoples[surname]['patronymic']
        phone = peoples[surname]['phone']
        email = peoples[surname]['email']
        tg = peoples[surname]['tg']
        sphere = peoples[surname]['sphere']
        business = peoples[surname]['business']
        position = peoples[surname]['position']
        text_content = f"<b>–§–ò–û:</b> {surname} {name} {patronymic}\n\n"

        if phone != "":
            text_content += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"

        if email != "":
            text_content += f"<b>E-mail:</b> {email}\n\n"

        if tg != "":
            text_content += f"<b>TG:</b> {tg}\n\n"

        if sphere != []:
            text_content += f"<b>–°—Ñ–µ—Ä–∞(-—ã):</b> {', '.join(sphere)}\n\n"

        if business != "":
            text_content += f"<b>–ë–∏–∑–Ω–µ—Å:</b> {business}\n\n"

        if position != "":
            text_content += f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}"

        await bot.send_message(message.from_user.id, text_content, parse_mode = types.ParseMode.HTML, reply_markup=getContactButtons())
        setState(message.from_user.id, "main")
    else:
        await bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=getContactButtons())

async def getContactTagMessage(bot, message, tag):
    peoples = getPeoples()
    surname = ""

    for x in peoples.keys():
        if peoples[x]['tg'] == tag:
            surname = x
            break

    if surname in peoples.keys():
        name = peoples[surname]['name']
        patronymic = peoples[surname]['patronymic']
        phone = peoples[surname]['phone']
        email = peoples[surname]['email']
        tg = peoples[surname]['tg']
        sphere = peoples[surname]['sphere']
        business = peoples[surname]['business']
        position = peoples[surname]['position']
        text_content = f"<b>–§–ò–û:</b> {surname} {name} {patronymic}\n\n"

        if phone != "":
            text_content += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"

        if email != "":
            text_content += f"<b>E-mail:</b> {email}\n\n"

        if tg != "":
            text_content += f"<b>TG:</b> {tg}\n\n"

        if sphere != []:
            text_content += f"<b>–°—Ñ–µ—Ä–∞(-—ã):</b> {', '.join(sphere)}\n\n"

        if business != "":
            text_content += f"<b>–ë–∏–∑–Ω–µ—Å:</b> {business}\n\n"

        if position != "":
            text_content += f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}"

        await bot.send_message(message.from_user.id, text_content, parse_mode = types.ParseMode.HTML, reply_markup=getContactButtons())
        setState(message.from_user.id, "main")
    else:
        await bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=getContactButtons())

async def getUsersEditMessage(bot, callback_query):
    await callback_query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É\n<b>–í–∞–∂–Ω–æ! –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ –±—É–¥—É—Ç –ø—Ä–∏—Å—É—Ç—Å–≤–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ id, —Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏</b>", parse_mode = types.ParseMode.HTML)
    await bot.send_document(callback_query.from_user.id, open(config.USERS_PATH.get_secret_value(), 'rb'))

async def getSpheresEditMessage(bot, callback_query):
    await callback_query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É", parse_mode = types.ParseMode.HTML)
    await bot.send_document(callback_query.from_user.id, open(config.SPHERES_PATH.get_secret_value(), 'rb'))

async def getEventsEditMessage(callback_query):
    await callback_query.message.edit_text("<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>", parse_mode=types.ParseMode.HTML)
    await callback_query.message.edit_reply_markup(reply_markup=getEventsEditButtons())

async def getEventChangeMessage(callback_query):
    await callback_query.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É\n<b>–í–∞–∂–Ω–æ! –§–æ—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ —Ñ–∞–π–ª</b>",
        parse_mode=types.ParseMode.HTML)

async def getEventDescriptionMessage(bot, message, num):
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=getEventDescription(num))

async def getSuccessfulyEditEventMessage(bot, message):
    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ",
                           reply_markup=getSuccessfulyEditEventButtons())

async def errorSendingPhotoMessage(bot, message):
    await bot.send_message(message.from_user.id, "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∑–∞–π–¥–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç")

async def getAllMessage(bot, message, text):
    data = getUsers()
    for x in data.keys():
        if data[x]["access"] == True and x != message.from_user.id:
            await bot.send_message(x, text)

async def getSuccessfulySendAllMessage(bot, message):
    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ",
                           reply_markup=getSuccessfulyEditEventButtons())